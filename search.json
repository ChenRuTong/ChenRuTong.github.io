[{"title":"nvm和nrm","url":"/2023/02/14/nvm%E5%92%8Cnrm/","content":"nvm1.安装nvmwindows github（程序员交友平台）地址Releases · coreybutler&#x2F;nvm-windows · GitHub\n\n\n2.Nvm 常用命令操作nvm list 查看现在所有安装的node版本\nnvm list available 查看nodejs 官方的所有版本\nnvm install （版本号）下载对应的node版本号\nnvm use 切换node版本\nnrmnrm 是一个 npm 源管理器，允许你快速地在 npm源间切换。\n1.首先安装 npm install -g nrm2.常用命令nrm ls 查看可选源\nnrm use （源）切换源\nnrm add （名称）（源）\n测试速度 nrm test npm\n","tags":["npm 插件"]},{"title":"vsCode常用插件和小技巧","url":"/2023/02/14/vsCode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E5%B0%8F%E6%8A%80%E5%B7%A7/","content":"插件vue2VeturVueHelper (提供Vue、Vue-router、Vuex的代码片段补全功能)Chinese (中文界面，安装的VSCode软件默认使用的是英文语言环境，如需要改成中文，可在扩展中安装中文语言包，安装后重启软件即可)\nvue3TypeScript Vue Plugin (Volar)Vue Language Features (Volar)\ncss htmlHTML CSS Support(CSS 自动补齐)\nts类型json2ts (可以自动生成数据类型)\n小妙招配置用户代码片段第一步：点开左边的设置图标，选择配置用户代码片段\n第二步： 搜索vue.json\n第三步：写配置代码（可以根据自己的需求写，下面是vue3的示例）\n&#123;\t&quot;Print to console&quot;: &#123;\t\t&quot;prefix&quot;: &quot;vue3&quot;,\t\t&quot;body&quot;: [\t\t\t&quot;&lt;template&gt;&quot;,\t\t\t&quot;&quot;,\t\t\t&quot;&lt;div&gt;&lt;/div&gt;&quot;,\t\t\t&quot;&quot;,\t\t\t&quot;&lt;/template&gt;&quot;,\t\t\t&quot;&quot;,\t\t\t&quot;&lt;script setup lang=&#x27;ts&#x27;&gt;&quot;,\t\t\t&quot;import &#123; ref, reactive &#125; from &#x27;vue&#x27;&quot;,\t\t\t&quot;&quot;,\t\t\t&quot;&lt;/script&gt;&quot;, \t\t\t&quot;&lt;style scoped&gt;&quot;,\t\t\t&quot;&quot;,\t\t\t&quot;&lt;/style&gt;&quot;\t\t],\t\t&quot;description&quot;: &quot;Log output to console&quot;\t&#125;&#125;\n\n写代码特效Power Mode 插件\n&#123;    &quot;window.zoomLevel&quot;: 1,    \t//是否开启        &quot;powermode.enabled&quot;: true,        //效果样式  “水花-particles”, “烟花-fireworks”, “火焰-flames”, “雪花-magic”, “幽灵-clippy”, “激光-simple-rift”, “大激光-exploding-rift”        &quot;powermode.presets&quot;: &quot;flames&quot;,    &quot;powermode.explosions.customCss&quot;: &#123;    &#125;,    &quot;powermode.combo.timerEnabled&quot;: &quot;hide&quot;,    &quot;powermode.combo.counterEnabled&quot;: &quot;hide&quot;,    &quot;powermode.shake.enabled&quot;: false&#125;","tags":["vsCode"]},{"title":"Hello World","url":"/2023/02/13/hello-world/","content":"Welcome to Hexo ! This is your very first post. Check documentation  for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting  or you can ask me on GitHub .\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing \nRun server$ hexo server\n\nMore info: Server \nGenerate static files$ hexo generate\n\nMore info: Generating \nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment \n"},{"title":"前端导出excel","url":"/2023/02/14/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%87%BAexcel/","content":"需要用到的插件：xlsx    npm install xlsx-S\n第三方ui库：element ui  npm i element-ui -S\n1.在main.js 引入 element uiimport ElementUI from &#x27;element-ui&#x27;;import &#x27;element-ui/lib/theme-chalk/index.css&#x27;Vue.use(ElementUI);\n\n2.代码示例&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div&gt;      &lt;el-button @click=&quot;exportExcel&quot;&gt;导出excel&lt;/el-button&gt;    &lt;/div&gt;    &lt;div style=&quot;width:50%; margin:0 auto&quot;&gt;      &lt;el-table      class=&quot;multipleTable&quot;      :data=&quot;tableData&quot;      style=&quot;width: 100%&quot;      @selection-change=&quot;handleSelectionChange&quot;&gt;    &lt;el-table-column      fixed      type=&quot;selection&quot;      width=&quot;55&quot;&gt;    &lt;/el-table-column&gt;    &lt;el-table-column    fixed      prop=&quot;date&quot;      label=&quot;日期&quot;      width=&quot;150&quot;&gt;    &lt;/el-table-column&gt;    &lt;el-table-column label=&quot;配送信息&quot;&gt;      &lt;el-table-column        prop=&quot;name&quot;        label=&quot;姓名&quot;        width=&quot;120&quot;&gt;      &lt;/el-table-column&gt;      &lt;el-table-column label=&quot;地址&quot;&gt;        &lt;el-table-column          prop=&quot;province&quot;          label=&quot;省份&quot;          width=&quot;120&quot;&gt;        &lt;/el-table-column&gt;        &lt;el-table-column          prop=&quot;city&quot;          label=&quot;市区&quot;          width=&quot;120&quot;&gt;        &lt;/el-table-column&gt;        &lt;el-table-column          prop=&quot;address&quot;          label=&quot;地址&quot;          width=&quot;300&quot;&gt;        &lt;/el-table-column&gt;        &lt;el-table-column          prop=&quot;zip&quot;          label=&quot;邮编&quot;          width=&quot;120&quot;&gt;        &lt;/el-table-column&gt;      &lt;/el-table-column&gt;    &lt;/el-table-column&gt;  &lt;/el-table&gt;    &lt;/div&gt;      &lt;/div&gt;&lt;/template&gt; &lt;script lang=&quot;ts&quot;&gt;import Vue from &#x27;vue&#x27;;import * as XLSX from &#x27;xlsx&#x27;import &#123; tableArr &#125; from &#x27;@/type/table&#x27;export default Vue.extend(&#123;  name: &#x27;App&#x27;,  data() &#123;    return &#123;      tableData: [&#123;          date: &#x27;2016-05-03&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;, &#123;          date: &#x27;2016-05-02&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;, &#123;          date: &#x27;2016-05-04&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;, &#123;          date: &#x27;2016-05-01&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;, &#123;          date: &#x27;2016-05-08&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;, &#123;          date: &#x27;2016-05-06&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;, &#123;          date: &#x27;2016-05-07&#x27;,          name: &#x27;王小虎&#x27;,          province: &#x27;上海&#x27;,          city: &#x27;普陀区&#x27;,          address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,          zip: 200333        &#125;,],        multipleSelection: tableArr()    &#125;  &#125;,   methods: &#123;      handleSelectionChange(val:any) &#123;        this.multipleSelection = val;      &#125;,      exportExcel() &#123;        if(this.multipleSelection.length &lt;= 0) &#123;           this.$message(&#123;            message: &#x27;还没选择要导出excel的数据噢&#x27;,            type: &#x27;warning&#x27;          &#125;)          return        &#125;        const loading = this.$loading(&#123;          lock: true,          text: &#x27;Loading&#x27;,          spinner: &#x27;el-icon-loading&#x27;,          background: &#x27;rgba(0, 0, 0, 0.7)&#x27;        &#125;)         let arr = this.multipleSelection.map(item =&gt; &#123;          return &#123;            日期: item.date,            姓名: item.name,            省份:item.province,            地区:item.city,            地址: item.address,            邮编: item.zip.toString()          &#125;        &#125;)        let wscols = [        &#123; wch: 15 &#125;,        &#123; wch: 20 &#125;,        &#123; wch: 15 &#125;,        &#123; wch: 15 &#125;,        &#123; wch: 35 &#125;,        &#123; wch: 15 &#125;,      ]        let sheet = XLSX.utils.json_to_sheet(arr)        // let sheet = XLSX.utils.table_to_sheet(document.querySelector(&#x27;.multipleTable&#x27;))         // sheet[&#x27;!merges&#x27;] = [ &#123;s: &#123;r: 0, c: 2&#125;, e: &#123;r: 0, c: 4&#125;&#125; ]  //设置合并列        sheet[&#x27;!cols&#x27;] = wscols  //设置列宽        let book = XLSX.utils.book_new()        XLSX.utils.book_append_sheet(book, sheet, &quot;sheet1&quot;)        XLSX.writeFile(book, `testExcel.xls`)        loading.close()      &#125;,    &#125;&#125;);&lt;/script&gt; &lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;\n\n2.1&#x2F;type&#x2F;table 里面的代码export type tableObj = &#123;    name: string,    date: string,    address: string,    province: string,    city:string,    zip:string&#125; export const tableArr = ():Array&lt;tableObj&gt; =&gt; &#123;    return []&#125;","tags":["vue"]},{"title":"前端解析excel 文件","url":"/2023/02/13/%E5%89%8D%E7%AB%AF%E8%A7%A3%E6%9E%90excel-%E6%96%87%E4%BB%B6/","content":"最近碰到了这样的需求 ： 把excel表格导入解析，然后把excel表格的数据渲染在页面上\n针对这个需求，我写了一个解析excel表格的小demo，希望对大家有所帮助\n解析excel 表格需要用到两个插件\n\nxlsx  https://www.npmjs.com/package/xlsx \n\nvue-papa-parse https://www.npmjs.com/package/vue-papa-parse \n\nelement-ui  https://element.eleme.cn/#/zh-CN \n\n\n\n第一步先下载两个插件：npm i vue-papa-parse -S\nnpm i xlsx -S\nnpm i element-ui -S\n\n第二步在main.js 引入插件 import ElementUI from &#x27;element-ui&#x27;;import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;import VuePapaParse from &#x27;vue-papa-parse&#x27;Vue.use(ElementUI)Vue.use(VuePapaParse)\n\n然后准备工作就做好了，下面是我自己写的解析excel的小demo（vue+Ts）&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;div class=&quot;upBox&quot;&gt;        &lt;el-upload        class=&quot;upload-demo&quot;        accept=&quot;application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;        action        :http-request=&quot;upexcel&quot;        :show-file-list=&quot;false&quot;        &gt;        &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;点击上传&lt;/el-button&gt;        &lt;/el-upload&gt;        &lt;input type=&quot;text&quot; disabled v-model=&quot;fileName&quot;&gt;        &lt;el-button size=&quot;small&quot; type=&quot;danger&quot; @click=&quot;clear&quot;&gt;清除&lt;/el-button&gt;    &lt;/div&gt;  &lt;el-table     v-loading=&quot;loading&quot;      :data=&quot;tableData&quot;      stripe      border      style=&quot;width: 100%; margin:0 auto; marginTop:50px&quot;&gt;      &lt;el-table-column        prop=&quot;date&quot;        label=&quot;日期&quot;        width=&quot;180&quot;&gt;      &lt;/el-table-column&gt;      &lt;el-table-column        prop=&quot;name&quot;        label=&quot;姓名&quot;        width=&quot;180&quot;&gt;      &lt;/el-table-column&gt;      &lt;el-table-column        prop=&quot;address&quot;        label=&quot;地址&quot;&gt;      &lt;/el-table-column&gt;    &lt;/el-table&gt;    &lt;router-view/&gt;  &lt;/div&gt;&lt;/template&gt; &lt;script lang=&quot;ts&quot;&gt;import * as XLSX from &#x27;xlsx&#x27;import &#123;tableInfo, tableArr&#125; from &#x27;../src/type/tableData&#x27;import Vue from &#x27;vue&#x27;export default Vue.extend(&#123;  data() &#123;    return &#123;      tableData:tableArr(),      fileName:&#x27;&#x27;,      loading:false    &#125;  &#125;,  methods:&#123;    upexcel(e: any) &#123;      let file = e.file      if(!file) return      // 把文件按照二进制进行读取      this.loading = true      this.fileName = file.name      let reader = new FileReader();      reader.readAsBinaryString(file);\t\t  reader.onload = (ev :any) =&gt; &#123;\t\t\tlet data = ev.target.result      this.toJosn(data)\t\t&#125;;    &#125;,    toJosn(data: any) &#123;      //读取FILE中的数据（变为JSON格式）      let workbook = XLSX.read(data, &#123; type: &quot;binary&quot; &#125;);      let worksheet = workbook.Sheets[workbook.SheetNames[1]];      let csv = XLSX.utils.sheet_to_csv(worksheet);      let order_data = this.$papa.parse(csv)      let data_value = order_data.data      setTimeout(this.setData,3000,data_value)    &#125;,    setData(data_value: any) &#123;      let arr = []      for(let i = 1; i&lt;data_value.length; i++) &#123;        let obj = tableInfo()         obj.date = data_value[i][0]         obj.name = data_value[i][1]         obj.address = data_value[i][2]         arr.push(obj)      &#125;      this.tableData = arr      this.loading = false    &#125;,    clear() &#123;      this.tableData = [];      this.fileName = &#x27;&#x27;;      this.loading = false    &#125;  &#125;&#125;)&lt;/script&gt; &lt;style lang=&quot;scss&quot;&gt;#app &#123;  width: 70%;  user-select: none; //文本不能被选取  margin: 0 auto;  .upBox &#123;    width: 100%;    display: flex;    align-items: center;    justify-content: center;    height: 32px;  input &#123;      height:32px;      box-sizing: border-box;      margin-left: 20px;      margin-right: 20px;    &#125;  &#125;&#125;&lt;/style&gt;\n\n..&#x2F;src&#x2F;type&#x2F;tableData 里面的代码是：  export type tableObj = &#123;    date: string,    name: string,    address: string&#125;export const tableInfo =():tableObj=&gt; &#123;    return &#123;&#125; as tableObj&#125;export const tableArr =():tableObj[]=&gt; &#123;    return []&#125;","tags":["vue"]},{"title":"字符串常用api","url":"/2023/02/14/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8api/","content":"1.slice()不会改变原字符串，返回被截取后的字符串\nlet str = &#x27;abcdefg&#x27;let result =  str.slice(0,2) console.log(result,str) //ab abcdefg\n\n2.split()不会改变元字符串，返回分割成的数组\nsplit(delimiter [,limit])\ndelimiter：分割处的字符串或正则表达式。limit: 指定已返回数组的最大长度。\nlet str = &#x27;abcdefg&#x27;let result = str.split(&#x27;&#x27;)let result2 = str.split(&#x27;&#x27;,2)console.log(str,result) //abcdefg   [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]console.log(str,result2) //abcdefg     [&#x27;a&#x27;, &#x27;b&#x27;]\n\n3.indexOf()indexOf(value [,from])在指定字符串中寻找一个字符或子串。只查找第一个，找不到返回 -1。\nlet str = &#x27;abcdefg&#x27;let result = str.indexOf(&#x27;a&#x27;)let result2 = str.indexOf(&#x27;h&#x27;)let result3 = str.indexOf(&#x27;a&#x27;,1)let result4 = str.indexOf(&#x27;b&#x27;,1)console.log(str,result) //abcdefg 0console.log(str,result2) //abcdefg -1console.log(str,result3) // abcdefg -1console.log(str,result4) //abcdefg 1\n\n4.lastIndexOf()lastIndexOf(value [,from])在指定字符串中寻找一个字符或子串。只查找第一个，找不到返回 -1。\nlet str = &#x27;abcdefg&#x27;let result = str.lastIndexOf(&#x27;a&#x27;)let result2 = str.lastIndexOf(&#x27;h&#x27;)let result3 = str.lastIndexOf(&#x27;c&#x27;,1)let result4 = str.lastIndexOf(&#x27;c&#x27;,2)console.log(str,result) //abcdefg 0console.log(str,result2) //abcdefg -1console.log(str,result3) // abcdefg -1console.log(str,result4) //abcdefg 2\n\n5.concat()concat(value)\n把value拼接到str上\n不会改变原字符串，返回拼接后的新字符串\nlet str = &#x27;abcdefg&#x27;let result = str.concat(&#x27;123&#x27;)console.log(str,result) //abcdefg abcdefg123\n\n6.charAt()charAt(index) 和 str[index]\n获取指定位置字符。\nlet str = &#x27;abcdefg&#x27;let result = str.charAt(2)let result2 = str[2]console.log(str,result) //abcdefg cconsole.log(str,result2) //abcdefg c\n\n7.trim()去掉字符串前后空格。\nlet str = &#x27;  abcdefg  &#x27;let result = str.trim()console.log(str,result) //abcdefg abcdefg\n\n7.charCodeAt()charCodeAt(index)\n指定位置的字符转ASCII码   （返回的是一个整数，值在 0~65535 之间）\n如果 index 为负数或大于等于字符串的长度，则 charCodeAt() 将返回 NaN。\nlet str = &#x27;abcdefg&#x27;let result = str.charCodeAt(0)console.log(str,result) //abcdefg 97\n\n8.fromCharCode()fromCharCode(c1, c2, …)\n跟 str.charCodeAt() 相反的操作，把 ASCII码 转成字符串。\nlet result = String.fromCharCode(97,98,99)console.log(result) // abc\n\n9.toUpperCase()转成大写 (不会改变原字符串，返回新的字符串)\nlet str = &#x27;abcdefg&#x27;let result = str.toUpperCase()console.log(str,result) //abcdefg ABCDEFG\n\n10.toLowerCase()转成小写 (不会改变原字符串，返回新的字符串)\nlet str = &#x27;ABCDEFG&#x27;let result = str.toLowerCase()console.log(str,result) //ABCDEFG abcdefg\n\n11.includes()includes(searchvalue[, start])\n用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 true，否则返回 false。\nsearchvalue\t必需，要查找的字符串。start\t可选，设置从那个位置开始查找，默认为 0。\nlet str = &#x27;ABCDEFG&#x27;let result = str.includes(&#x27;A&#x27;)console.log(str, result) //ABCDEFG true\n\n12.replace()str.replace(regexp|string, newString|function)\n替换（不会改变原字符串，返回替换后的字符串）\n//例子去掉字符串中的所有空格let str = &#x27;ABC  DE  FG&#x27;let result = str.replace(/\\s*/g, &#x27;&#x27;)console.log(str,result) //ABC  DE  FG   ABCDEFG\n\n如果第2个参数是函数，该函数的返回值将作为替换文本\nstr.replace(/elective=(\\d*)/g, function(match, $1, $2, offset, string) &#123;&#125;)//match：正则匹配到的完整内容。//$1：正则第一个分组匹配的内容，以此类推。//offset：匹配到的字符串在原字符串中的下标（比如，原字符串是 &#x27;abcd&#x27;，匹配到的子字符串是&#x27;bc&#x27;，那么这个参数将会是 1）//string：被匹配的原字符串//示例：将一个字符串中所有单词的首字母大写text.replace(/\\b\\w+\\b/g, function(word) &#123;  return word.substring(0, 1).toUpperCase() + word.substring(1);&#125;);\n\n\n","tags":["javascript"]},{"title":"数组常用api","url":"/2023/02/14/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8api/","content":"1.push()从数组尾部插入一个或者多个元素（会修改原数组，并返回新数组的长度）\n  let arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]    //插入一个元素  let result = arr.push(&#x27;e&#x27;)  console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]  console.log(result) //5    //插入多个元素  let result2 = arr.push(&#x27;f&#x27;,&#x27;g&#x27;)  console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]  console.log(result2) //7\n\n\n2.pop()从数组的尾部删除一个元素（会修改原数组，并且返回被删除的元素）\nlet arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]let result = arr.pop()//不可以带参数console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]console.log(result) //d\n\n3.unshift()从数组的头部插入一个或多个元素（会修改原数组，返回新数组长度）\n  let arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]    //从头部插入一个元素  let result = arr.unshift(&#x27;A&#x27;)   console.log(arr) //[&#x27;A&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]   console.log(result) //5     //从头部插入多个元素  let result2 = arr.unshift(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;)   console.log(arr) //[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;A&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]  console.log(result2) //8\n\n4.shift()从数组的头部删除一个元素（会修改原数组，并且返回被删除的元素\nlet arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]let result = arr.shift()console.log(arr) //[&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]console.log(result) //a\n\n5.slice()slice(start, end)  start:开始裁切的下标, end:结束裁切的下标 end切不到，实际上裁切的范围是 下标start到end-1 （不会修改原数组，并且返回裁切出来的数组）\n  let arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]     //如果传递两个参数, 则从0下标开始裁切, 裁切到3下标, 3裁切不到  let result = arr.slice(0,3)  console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]  console.log(result) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]    //如果只有一个参数, 则作为开始裁切的下标, 裁切到数组尾部  let result2 = arr.slice(1)  console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]  console.log(result2) //[&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]     //如果传递负数参数, 则从数组的尾部往前数 (或者直接使用 数组的长度+负数参数 )  let result3 = arr.slice(-4, -1)  console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]  console.log(result3) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]\n\n6.splice()splice(start, length, [可选参数列表])  start:开始裁切的下标, length:要裁切多少个（会改变原数组，返回裁切出来的数组）\n  let arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]//如果只有一个参数, 则作为开始裁切的下标, 裁切到数组尾部let result = arr.splice(2)console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;]console.log(result) //[&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]   let arr2 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]//如果传递两个参数, 则从2下标开始裁切, 裁切4个元素let result2 = arr2.splice(2,3)console.log(arr2) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;f&#x27;]console.log(result2) //[&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]   let arr3 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]//如果传递多个其他参数, 会把其他的参数, 替换数组中被掉裁切的部分let result3 = arr3.splice(2,&#x27;html&#x27;,&#x27;css&#x27;,&#x27;javascript&#x27;,&#x27;vue&#x27;)console.log(arr3) // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;, &#x27;vue&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]console.log(result3) //[]   let arr4 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]//如果传递多个其他参数, 而裁切长度为0, 把其他的参数插入要裁切的下标之前let result4 = arr4.splice(2, 0,&#x27;html&#x27;,&#x27;css&#x27;,&#x27;javascript&#x27;,&#x27;vue&#x27;)console.log(arr4) // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;html&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;, &#x27;vue&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]console.log(result4) //[]   let arr5 = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]//第一个参数允许传递负数let result5 = arr5.splice(-3,2)console.log(arr5) // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;f&#x27;]console.log(result5) //[&#x27;d&#x27;, &#x27;e&#x27;]\n\n7.join()join(“连接符”);  以特定的连接符, 把数组连接成字符串（不会改变原数组，返回连接成的字符串）\nlet arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]let result = arr.join(&#x27;,&#x27;)console.log(arr) // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]console.log(result) // a,b,c,d,e,f\n\n8.concat()concat([多个参数]) 连接一个或多个数组（不会改变原数组，返回连接过后的数组）\nlet arr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;]let arr2 = [&#x27;html&#x27;,&#x27;css&#x27;,&#x27;javascript&#x27;,&#x27;vue&#x27;]let result = arr.concat(arr2)console.log(arr) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]console.log(result) //[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;html&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;, &#x27;vue&#x27;]\n\n9.indexOf()indexOf( 要查找的元素, [指定的下标] ) 在数组中查找指定元素 如果有就返回下标, 如果没有返回-1    (可选参数: 从指定下标开始往后查找元素)\nlet arr = [1,2,3,4,5,4,3,2,1];console.log(arr.indexOf(1)); // 没有填fromIndex所以默认从索引为0的位置开始往后查找 // 0console.log(arr.indexOf(1,1)); // 表示从索引为1的位置开始往后查找 // 8\n\n10.lastIndexOf()lastIndexOf(要查找的元素, 指定下标)  如果有就返回下标, 如果没有返回-1\nvar longStr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;];//如果有两个参数  第一个参数是要查找的元素, 第二个参数是从指定的下标开始往数组头部查找元素var lastIndex = longStr.lastIndexOf(&#x27;c&#x27;,3)console.log(lastIndex) //3\n\n11.reverse()reverse() 反转数组, 把数组的顺序进行颠倒(改变原数组，并且返回颠倒之后的数组)\nvar longStr = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;];var lastIndex = longStr.reverse()console.log(lastIndex) //[&#x27;f&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]console.log(longStr) //[&#x27;f&#x27;, &#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]\n\n12.sort()sort() 排序（改变原数组，并且返回排好序的数组）\n//升序var points = [40,100,1,5,25,10];let result =  points.sort(function(a,b)&#123;return a-b&#125;);console.log(points) //[1, 5, 10, 25, 40, 100]console.log(result) //[1, 5, 10, 25, 40, 100] //降序var points2 = [40,100,1,5,25,10];let result2 =  points2.sort(function(a,b)&#123;return b-a&#125;);console.log(points2) //[100, 40, 25, 10, 5, 1]console.log(result2) //[100, 40, 25, 10, 5, 1]\n\n13.some()some方法的作用：判断数组中至少存在一个元素满足指定条件\nlet arr = [1, 2, 3, 4, 5]let range = &#123;min: 3, max: 5&#125;let result = arr.some( function(item,index)&#123;  if (this.min &lt;= item &amp;&amp; item&lt;= this.max) &#123;    return true  &#125;  console.log(item) // 1, 2&#125;,range)      console.log(result)  // true\n\n14.every()every()方法会遍历数组的每一项，如果有有一项不满足条件，则表达式返回false,剩余的项将不会再执行检测；如果遍历完数组后，每一项都符合条，则返回true。\n参数说明：  第一个参数为一个回调函数，必传，数组中的每一项都会遍历执行该函数。  currentValue：必传，当前项的值  index：选传，当前项的索引值  arr：选传，当前项所属的数组对象  第二个参数thisValue为可选参数，回调函数中的this会指向该参数对象Tips:  every() 不会对空数组进行检测  every() 不会改变原始数组\n\nlet arr = [1, 2, 3, 4, 5, 7]let result = arr.every(function(item, index, arr) &#123;  return item &gt; 6&#125;)console.log(result) // false\n\n15.filter()filter是我们经常使用它过滤array的某些元素，返回剩下的元素\nlet arr = [1, 2, 3, 4, 5, 7]let result = arr.filter(function(item, index, arr) &#123;  if (item &gt; 3) &#123;    return true  &#125;&#125;)console.log(result) // 4, 5, 7\n\n16.reduce ()reduce 用来迭代一个数组，并且把它累积到一个值中。\npre: 必需。初始值, 或者计算结束后的返回值。cur： 必需。当前元素。index： 可选。当前元素的索引。arr： 可选。当前元素所属的数组对象。init: 可选。传递给函数的初始值，相当于pre的初始值。reduce里面有一定要return，return出去的值也要注意\n array.reduce((pre, cur, index, arr)=&gt;&#123;... &#125;, init); //基本数据类型求和 let arr2 = [9, 4, 3, 6, 9]; let sum = arr2.reduce((pre, cur) =&gt; &#123;   return pre + cur &#125;,0) console.log(sum)   //31 //二维数组转化为一维 let arr = [[1, 2, 8], [3, 4, 9], [5, 6, 10]]; let res = arr.reduce((pre, cur) =&gt; &#123;   return pre.concat(cur) &#125;,[]); console.log(res)  //[1, 2, 8, 3, 4, 9, 5, 6, 10] //多维数组转化为一维 let arr = [[1, [2, 8]], [3, 4, 9], [5, [6, 10]]] function fn(arr) &#123;   return arr.reduce((pre, cur) =&gt; &#123;     return pre.concat(Array.isArray(cur) ? fn(cur) : cur);   &#125;, []); &#125; const newArr = fn(arr); console.log(newArr); //[1, 2, 8, 3, 4, 9, 5, 6, 10]\n\n17.map()map是操作js数组的方法，也可以说是一个函数，作用是遍历整个数组，对里面的每个值做处理再返回一个新的值。\n注意:除非使用map数组里面存在嵌套复杂的对象、数组结构，否则map是不会修改原数组的\nlet a=[1,2,3]let b= a.map(item =&gt; item&lt;2?item*2:item)console.log(a)//[1,2,3]console.log(b)//[2,2,3]//例子二const bookList = [  &#123;&quot;id&quot;:10,&quot;title&quot;:&quot;Web前端开发&quot;,&quot;price&quot;:99.9&#125;,  &#123;&quot;id&quot;:11,&quot;title&quot;:&quot;C++&quot;,&quot;price&quot;:80.9&#125;,  &#123;&quot;id&quot;:12,&quot;title&quot;:&quot;Python&quot;,&quot;price&quot;:100.9&#125;]console.log(bookList.map(book =&gt;&#123;  return &#123;title:book.title,price:book.price&#125;&#125;))\n\n18.includes()简介：首先,includes()方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false\n语法：includes（searchElement，fromIndex）searchElement  必须。需要查找的元素值。fromIndex      可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。\n\nconst arr  = [1,2,3,4,5]const result = arr.includes(1)const result2 = arr.includes(1,2)const result3 = arr.includes(1,-1)console.log(arr, result) //[1,2,3,4,5], trueconsole.log(arr, result2) //[1,2,3,4,5], falseconsole.log(arr, result3) //[1,2,3,4,5], false","tags":["javascript"]}]